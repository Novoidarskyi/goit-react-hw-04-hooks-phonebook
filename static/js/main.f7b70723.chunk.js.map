{"version":3,"sources":["components/Phonebook/Phonebook.module.css","components/Filter/Filter.module.css","components/utils/common.module.css","components/Contacts/Contacts.jsx","components/Phonebook/Phonebook.jsx","components/Filter/Filter.jsx","App.js","index.js","components/Contacts/Contacts.module.css"],"names":["module","exports","Contacts","contacts","ondeleteContact","className","styles","titel","css","list","map","id","name","number","listItem","type","onClick","button","Phonebook","onSubmit","useState","setName","setNumber","handleChange","e","target","value","preventDefault","container","pattern","title","required","onChange","input","Filter","App","setContacts","filter","setFilter","useEffect","localStorage","getItem","parseContacts","JSON","parse","setItem","stringify","visibleContact","normalaizedContact","toLowerCase","contact","includes","getVisibleContact","position","toastOptions","duration","style","border","height","repeatedContact","some","item","repeatedNumber","toast","error","shortid","generate","prevState","success","currentTarget","contactId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f7b70723.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Phonebook_input___U4k1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__id4rx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"titel\":\"common_titel__2-L5K\",\"button\":\"common_button__XY-6d\",\"container\":\"common_container__3AiIS\"};","import PropTypes from 'prop-types';\r\nimport styles from '../utils/common.module.css';\r\nimport css from './Contacts.module.css'\r\n\r\nconst Contacts = ({ contacts, ondeleteContact }) => {\r\n  return (\r\n    <div>\r\n      <h1 className={styles.titel}>Contacts</h1>\r\n      <ol className={ css.list}>\r\n        {contacts.map(({id, name, number}) => (\r\n          <li key={id} className={css.listItem}>\r\n            {name}: {number}\r\n            <button type=\"button\" onClick={() => ondeleteContact(id)} className={ styles.button}>Delete</button>\r\n          </li>\r\n        ))}\r\n      </ol>\r\n      \r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nContacts.propTypes = {\r\n  contacts: PropTypes.arrayOf(PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    number: PropTypes.string.isRequired,\r\n  }),).isRequired,\r\n  ondeleteContact: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Contacts\r\n","import React, { useState } from 'react';\r\nimport styles from '../utils/common.module.css';\r\nimport css from './Phonebook.module.css';\r\n\r\n\r\n\r\nconst Phonebook = ({onSubmit}) => {\r\n\r\n  const [name, setName] = useState(\"\");\r\n  const [number, setNumber] = useState(\"\");\r\n\r\n   // Метод для записи в state значений, введенных в input\r\n\r\n  const handleChange = e => {\r\n    const { name, value } = e.target;\r\n\r\n    switch (name) { \r\n      case \"name\":\r\n        setName(value);\r\n        break;\r\n      \r\n        case \"number\":\r\n        setNumber(value);\r\n        break;\r\n      \r\n      default: return\r\n    }\r\n  \r\n  };\r\n\r\n  // Метод для отправки state формы в state App и очистки input\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    onSubmit(name, number);\r\n    setName(\"\");\r\n    setNumber(\"\");\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <h1 className={ styles.titel}>Phonebook</h1>\r\n        <form onSubmit={handleSubmit} className={styles.container}>\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            value={name}\r\n            onChange={handleChange}\r\n            className={ css.input}\r\n          />\r\n           <input\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n            value={number}\r\n            onChange={handleChange}\r\n             className={ css.input}\r\n          />\r\n          <button type=\"submit\" className={ styles.button}>Add contact</button>\r\n        </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Phonebook\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import PropTypes from 'prop-types';\r\nimport styles from '../utils/common.module.css';\r\nimport css from './Filter.module.css';\r\n\r\nconst Filter = ({ value, onChange }) => {\r\n  return (\r\n    <label className={styles.container} >\r\n          Find contacts by name\r\n          <input\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={onChange}\r\n        className={css.input}\r\n          />\r\n        </label>\r\n  \r\n  )\r\n}\r\n\r\nFilter.propTypes = {\r\n value: PropTypes.string.isRequired,\r\n onChange: PropTypes.func.isRequired, \r\n}\r\n\r\nexport default Filter\r\n","import React, { useState, useEffect } from 'react';\nimport shortid from 'shortid';\nimport toast, { Toaster } from 'react-hot-toast';\nimport Contacts from 'components/Contacts';\nimport Phonebook from 'components/Phonebook';\nimport Filter from 'components/Filter';\nimport './App.css';\n\nconst App = () => {\n  const [contacts, setContacts] = useState([\n    { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n    { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n    { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n    { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n  ]);\n  const [filter, setFilter] = useState('');\n\n  // Метод для получения из localStorage контактов при первом рендере странице\n\n  useEffect(() => {\n    const contacts = localStorage.getItem('contacts');\n    const parseContacts = JSON.parse(contacts);\n    if (parseContacts) {\n      setContacts(parseContacts);\n    }\n  }, []);\n\n  // Метод для записи в localStorage контактов при изменении массива contacts в state App\n\n  useEffect(() => {\n    localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  // Метод для добавления нового контакта\n\n  const addContact = (name, number) => {\n    const repeatedContact = contacts.some(item => item.name.includes(name));\n    const repeatedNumber = contacts.some(item => item.number.includes(number));\n    if (repeatedContact && repeatedNumber) {\n      toast.error(`${name} is already in contacts`);\n      return;\n    }\n    {\n      const contact = {\n        id: shortid.generate(),\n        name,\n        number,\n      };\n      setContacts(prevState => [contact, ...contacts]);\n      toast.success(`${name} add to contacts`);\n    }\n  };\n\n  // Метод для удаления нового контакта\n\n  const deleteContact = contactId => {\n    setContacts(prevState =>\n      prevState.filter(contact => contact.id !== contactId),\n    );\n  };\n\n  // Метод для записи в state значения input фильтрации\n\n  const changeFilter = e => {\n    setFilter(e.currentTarget.value);\n  };\n\n  // Метод для отображения отфильтрованых контактов\n\n  const getVisibleContact = () => {\n    const normalaizedContact = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalaizedContact),\n    );\n  };\n\n  const visibleContact = getVisibleContact();\n\n  return (\n    <div className=\"App\">\n      <Toaster\n        position=\"top-right\"\n        toastOptions={{\n          duration: 3000,\n          style: {\n            border: '1px solid royalblue',\n            height: '50px',\n          },\n        }}\n      />\n      <Phonebook onSubmit={addContact} />\n      <Filter value={filter} onChange={changeFilter} />\n      <Contacts contacts={visibleContact} ondeleteContact={deleteContact} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'modern-normalize/modern-normalize.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Contacts_list__3L_kt\",\"listItem\":\"Contacts_listItem__1TQeK\"};"],"sourceRoot":""}